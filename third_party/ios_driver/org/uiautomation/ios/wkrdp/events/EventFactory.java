/*
 * Copyright 2012-2013 eBay Software Foundation and ios-driver committers
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
package org.uiautomation.ios.wkrdp.events;

import com.google.devtoolsdriver.devtools.DevtoolsEvent;
import com.google.devtoolsdriver.util.JavaxJson;
import java.lang.reflect.Constructor;
import javax.json.Json;
import javax.json.JsonObject;
import org.json.JSONObject;
import org.openqa.selenium.WebDriverException;

public class EventFactory {
  private static final String NODE_REMOVED = "DOM.childNodeRemoved";
  private static final String NODE_INSERTED = "DOM.childNodeInserted";

  public static Event createEvent(DevtoolsEvent event) {
    JsonObject obj =
        Json.createObjectBuilder()
            .add("method", event.method())
            .add("params", event.params())
            .build();
    try {
      return createObject(JavaxJson.toOrgJson(obj));
    } catch (Exception e) {
      throw new WebDriverException(
          "Error creating an event generated by the webview: " + event, e);
    }
  }

  private static Event createObject(JSONObject message) throws Exception {
    Class<? extends Event> clazz = getAssociatedEvent(message);

    Class<?>[] parameterTypes = new Class<?>[] {JSONObject.class};
    Object[] parameters = new JSONObject[] {message};

    Constructor<? extends Event> constructor = clazz.getConstructor(parameterTypes);
    return constructor.newInstance(parameters);
  }

  private static Class<? extends Event> getAssociatedEvent(JSONObject message) {
    String method = message.optString("method");

    if (NODE_REMOVED.equals(method)) {
      return ChildNodeRemoved.class;
    }

    if (isFrameOrIFrame(message)) {
      return ChildIframeInserted.class;
    }

    return Event.class;
  }

  private static boolean isFrameOrIFrame(JSONObject message) {
    String method = message.optString("method");
    JSONObject params = message.optJSONObject("params");

    if (NODE_INSERTED.equals(method)
        && params != null
        && "IFRAME".equals(params.optJSONObject("node").optString("nodeName"))) {
      return true;
    }
    if (NODE_INSERTED.equals(method)
        && params != null
        && "FRAME".equals(params.optJSONObject("node").optString("nodeName"))) {
      return true;
    }
    return false;
  }
}
